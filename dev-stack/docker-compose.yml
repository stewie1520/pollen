services:
  sequin:
    container_name: pollen_sequin
    image: sequin/sequin:latest
    ports:
      - "7376:7376"
    environment:
      - PG_HOSTNAME=postgres
      - PG_DATABASE=pollen
      - PG_PORT=5432
      - PG_USERNAME=pollen
      - PG_PASSWORD=pollen
      - PG_POOL_SIZE=20
      - SECRET_KEY_BASE=wDPLYus0pvD6qJhKJICO4dauYPXfO/Yl782Zjtpew5qRBDp7CZvbWtQmY0eB13If
      - VAULT_KEY=2Sig69bIpuSm2kv0VQfDekET2qy8qUZGI8v3/h3ASiY=
      - REDIS_URL=redis://redis:6379
      - CONFIG_FILE_PATH=/config.yml
      - SEQUIN_TELEMETRY_DISABLED=true
      - CRASH_REPORTING_DISABLED=true
    volumes:
      - ./sequin-config.yml:/config.yml
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - my_network
  # Sequin uses Redis to assist with its change data capture process.
  redis:
    image: redis:7
    container_name: pollen_redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--port", "6379"]
    volumes:
      - redis_data:/data
    networks:
      - my_network
  # main database for our application, also used by Sequin to store its internal state
  postgres:
    image: postgres:16.3-alpine
    container_name: pollen_db
    command: ["postgres", "-c", "wal_level=logical"]
    environment:
      POSTGRES_DB: pollen
      POSTGRES_USER: pollen
      POSTGRES_PASSWORD: pollen
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pollen -d pollen"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 2s
      start_interval: 1s
    networks:
      - my_network

  elasticsearch:
    image: elasticsearch:8.14.0
    container_name: pollen_elasticsearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      xpack.security.enabled: "false"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - my_network

  kafka:
    image: bitnami/kafka:latest
    container_name: pollen_kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@pollen_kafka:9093
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:9094,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://pollen_kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - my_network

  kafka-ui:
    image: kafbat/kafka-ui:main
    container_name: pollen_kafka_ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: pollen_kafka:9092
    networks:
      - my_network
    depends_on:
      - kafka

volumes:
  postgres_data:
  elasticsearch_data:
  redis_data:

networks:
  my_network:
    driver: bridge
